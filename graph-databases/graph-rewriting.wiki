= Переписывание графов =

Эта статья является [https://ru.wikipedia.org/wiki/Переписывание_графов переводом]
статьи [https://en.wikipedia.org/wiki/Graph_rewriting Википедии]. Автор перевода
[mailto:easimonenko@mail.ru Симоненко Евгений Анатольевич]. Лицензия на перевод
идентична лицензии на оригинал: CC BY-SA 3.0.

В [[Информатика|информатике]] '''переписывание графов''' (также '''перезапись графов''', '''преобразование графов''', '''трансформация графов''') -- техника по созданию нового [[Граф (математика)|графа]] из
исходного графа алгоритмическим образом. Переписывание графов находит широкое
применение в компьютерных науках, например, в [[Конструирование программного обеспечения|конструировании программного обеспечения]], в [[верификация программного обеспечения|верификации программного обеспечения]], в генерировании изображений, в [[Компилятор|компиляторах]], в [[Графовая база данных|графовых базах данных]].

Преобразования графов можно использовать в качестве абстракции вычислений.
Основная идея заключается в том, что состояние вычисления может быть
представлено в виде графа, дальнейшие шаги этого вычисления могут быть
представлены как правила преобразования на этом графе. Такие правила состоят из
исходного графа, который должен быть сопоставлен с подграфом полного
состояния, и заменяющего графа, который заменит сопоставленный подграф.

Формально  система [[Переписывание|переписывания]] графа обычно состоит из множества правил переписывания графа в форме <math>L \rightarrow R</math>, где <math>L</math> называется графом-образцом (или левой стороной), а <math>R</math> называется заменяющим графом (или правой частью правила). Правило переписывания
графа применяется к исходному графу путем поиска вхождения шаблонного графа ([[сопоставление с образцом]], тем самым решая [[Задача поиска изоморфного подграфа|проблему изоморфизма подграфа]]) и
замены найденного вхождения экземпляром заменяющего графа. Правила переписывания
могут быть дополнительно упорядочены в случае [[Глоссарий теории графов|помеченных графов]], например, в
графовых грамматиках, регулируемых строками.

Иногда понятие графовой грамматики используется в качестве синонима для системы
переписывания графа, особенно в контексте [[Формальный язык|формальных языков]]; различные формулировки
используются, чтобы подчеркнуть цель конструкций, таких как перечисление всех
графов из некоторого начального графа, то есть генерация графового языка –
вместо простого преобразования исходного состояния (хостового графа) в новое
состояние.

== Подходы к переписыванию графов ==

=== Алгебраический подход ===
Алгебраический подход к переписыванию графов основан на [[Теория категорий|теории категории]]. Алгебраический подход подразделяется на субподходы, наиболее распространенными из которых являются подход '''[[:en:Double pushout graph rewriting|double-pushout (DPO)]]''' и подход '''[[:en:Single pushout graph rewriting|single-pushout (SPO)]]'''. Другие подходы включают ''sesqui-pushout'' и ''[[Расслоённое произведение|pullback]]''.

С точки зрения подхода DPO правило переписывания графа это пара морфизмов в категории графов и гомоморфизмы графа между ними: <math>r = (L \leftarrow K \rightarrow R)</math> (или <math>L \supseteq K \subseteq R</math>), где <math>K \rightarrow L</math> [[Инъекция (математика)|инъективно]]. Граф <math>K</math> называется ''инвариантным'' или иногда ''склеивающим графом''. '''Шаг''' '''[[Переписывание|переписывания]]''' или применение правила <math>r</math> к исходному графу <math>G</math> определяется двумя диаграммами [[Кодекартов квадрат|кодекартова квадрата]], обе ведущими в один и тот же [[морфизм]] <math>k\colon K\rightarrow D</math>, где <math>D</math> это ''контекстный граф'' (откуда и происходит название ''double''-pushout). Другой морфизм графа <math>m\colon L\rightarrow G</math> моделирует вхождение <math>L</math> в <math>G</math> и называется '''[[Сопоставление с образцом|сопоставлением]]'''. Практическим пониманием этого является то, что <math>L</math> является подграфом, который сопоставляется из <math>G</math> (смотри [[Задача поиска изоморфного подграфа|задачу поиска изоморфного подграфа]]), и после того, как совпадение найдено, <math>L</math> заменяется на <math>R</math> в исходном графе <math>G</math>, где <math>K</math> служит интерфейсом, содержащим узлы и рёбра, которые при применении правила были сохранены. Граф <math>K</math> необходим для того, чтобы присоединить образец, сопоставляющийся его контексту: если он пуст, совпадение может обозначать только весь связанный компонент графа <math>G</math>.

Правило переписывания графа в подходе SPO это единственный морфизм в категории [[Мультиграф|помеченных мультиграфов]] и частичных отображений, которые сохраняют структуру мультиграфа: <math>r\colon L\rightarrow R</math>. Таким образом шаг переписывания определяется одной диаграммой [[Кодекартов квадрат|кодекартова квадрата]]. Практическое понимание этого аналогично подходу DPO. Разница в том, что нет интерфейса между исходным графом <math>G</math> и графом <math>G'</math>, являющимся результатом шага переписывания.

С практической точки зрения ключевое различие между DPO и SPO заключается в том, как они относятся к удалению узлов со смежными рёбрами, в частности, как они избегают того, чтобы такие удаления могли оставить после "висячие рёбра". Подход DPO удаляет узел только тогда, когда правило определяет удаление всех смежных рёбер, а также (это условие для висячих может быть проверено для данного сопоставления), в то время как подход SPO просто размещает смежные рёбра, не требуя явной спецификации.

Существует также другой алгебраический подход к переписыванию графов, основанный в основном на булевой алгебре и алгебре матриц, называющийся '''матричными графовыми грамматиками'''.<ref>{{harvnb|Perez|2009}} covers this approach in detail.</ref><ref>This topic is expanded at [http://www.mat2gra.info/ mat2gra.info].</ref>

=== Детерминированное переписывание графов ===
Еще один подход к переписыванию графов, известный как детерминированное переписывание графов, вышел из [[Логика|логики]] и [[Теория баз данных|теории баз данных]]. В этом подходе графы рассматриваются как экземпляры базы данных, а операции переписывания как механизм для определения запросов и представлений; поэтому всё переписывание требуется для получения уникальных результатов ([[С точностью до|вплоть до]] изоморфизма), и это достигается применением любого правила переписывания одновременно по всему графу, где бы оно ни применялось, таким образом, что результат действительно однозначно определен.

=== Переписывание абстрактного семантического графа ===
Другим подходом к переписыванию графов является переписывание [[Абстрактный семантический граф|абстрактного семантического графа (АСГ)]], который предполагает обработку или преобразование АСГ посредством набора синтаксических правил переписывания.

Абстрактные семантические графы являются важным вопросом в исследованиях языков программирования, поскольку правила переписывания АСГ способны формально выражать операционную семантику компилятора. АСГ также используются в качестве приспособления абстрактной машины к моделированию химических и биологических вычислений, а также графических вычислений, таких как параллельные модели. АСГ может осуществлять автоматическую проверку (верификацию) и логическое программирование, так как они хорошо подходят к представлению количественных высказываний в логике первого порядка. Программное обеспечение для символического программирования -- другое приложение для АСГ, которое способно представлять и выполнять вычисления с абстрактными алгебраическими структурами, такими как группы, поля и кольца.

Конференция TERMGRAPH<ref>{{cite web|url=http://www.termgraph.org.uk/|title=TERMGRAPH}}</ref> полностью фокусируется на исследованиях в области АСГ и их приложениях.

== Классы графовых грамматик и систем переписывания графов ==
Системы переписывания графов, естественно, группируются в классы в зависимости от используемых видов представлений графов, и того как выражены переписывания. Грамматика абстрактного семантического графа, в противном случае эквивалентно системе переписывания графов или системе замены графов, наиболее часто используется в классификациях. Некоторые общие типы:
* Атрибутивные графовые грамматики, как правило, формализованы с помощью подхода single-pushout или подхода double-pushout к характеристике замен, указанных в предыдущем разделе об алгебраическом подходе к переписыванию графов.
* Грамматики гиперграфов, включая как более строгие подклассы портовые графовые грамматики, линейные графовые грамматики и взаимодействующие сети.

== Реализации и применения ==
[[Файл:GraphRewriteExample.PNG|мини|Пример правила переписывания графа (оптимизация из построения компиляторов: умножение на 2 заменяется сложением)]]
Графы являются выразительным, визуально и математически точным формализмом моделирования объектов (субъектов), связанных отношениями; объекты представлены в виде узлов, а отношения между ними рёбрами. Узлы и ребра обычно типизированы и атрибутированы. Вычисления описываются в этой модели как изменения в отношениях между субъектами или как изменения атрибутов элементов графа. Они кодируются в правилах переписывания графов или преобразования графов и исполняются с помощью инструментов переписывания графов/преобразования графов.
* Инструменты, нейтральные к предметной области приложения:
** [http://user.cs.tu-berlin.de/~gragra/agg AGG], система атрибутивной графовой грамматики ([[Java]]).
** [http://www.cs.york.ac.uk/plasma/wiki/index.php?title=GP_%28Graph_Programs%29 GP (Graph Programs)], язык программирования для вычислений на графах с непосредственным применением правил преобразования графов.
** [http://homepages.laas.fr/khalil/GMTE/ GMTE] (Graph Matching and Transformation Engine) движок для сопоставления и преобразования графов. Является реализацией расширения алгоритма Messmer на [[C++]].
** GrGen.NET (Graph rewrite Generator), инструмент преобразования графов с генерацией кода на [[C Sharp|C#]] или сборок .NET.
** [http://groove.cs.utwente.nl/ GROOVE], набор инструментов на Java для редактирования графов и правил преобразования графов, для исследования пространств состояний граф-грамматик и проверки моделей этих пространств состояний; также может быть использован как движок преобразования графов.
** [https://github.com/Verites/verigraph/ Verigraph], программная спецификация и система верификации, основанная на переписывании графов ([[Haskell]]).
*  Инструменты для решения задач [[Программная инженерия|разработки программного обеспечения]] (в основном в рамках [[Архитектура, управляемая моделью|архитектуры, управляемой моделью (MDA)]]) с использованием переписывания графов:
** [http://emoflon.org/ eMoflon], инструмент преобразования моделей, совместимый с EMF и с поддержкой Story-Driven Modeling and тройственных графовых грамматик<br>
** [http://www.emorf.org EMorF] система переписывания графов основанная на [[Eclipse Modeling Framework|EMF]] и поддерживающая преобразования на месте и преобразования модель-модель. 
** [http://www.fujaba.de/ Fujaba] использует моделирование управляемое сюжетом, язык переписывания графов основан на PROGRES
** [[Графовая база данных|Графовые базы данных]] часто поддерживают динамическое переписывание графов.
** GReAT 
** [http://tinkerpop.apache.org/gremlin.html Gremlin], язык программирования для работы с графами
** [https://www.eclipse.org/henshin/ Henshin], система переписывания графов на базе [[Eclipse Modeling Framework|EMF]], поддерживающая преобразования на месте и  преобразования модель-модель, анализ критических пар и [[Проверка моделей|проверку моделей]]
** [http://www.se.rwth-aachen.de/tikiwiki/tiki-index.php%3Fpage=Research%3A+Progres.html PROGRES (PROgrammed Graph REwriting Systems)], интегрированная среда и очень высокоуровневый язык для программируемых систем переписывания графов. 
** VIATRA

* Инструменты для машиностроения: 
** [http://www.graphsynth.com GraphSynth] представляет собой интерпретатор и пользовательскую среду языка для создания неограниченных графовых грамматик, а также тестирования и поиска равнодействующей. GraphSynth сохраняет графы и правила графовых грамматик в файлы [[XML]] и написан на [[C Sharp|языке C#]].
** [https://www.soley-technology.com/en/pr-soley-studio Soley Studio], представляет собой [[Интегрированная среда разработки|интегрированную среду разработки]] для  систем трансформации  графов. Её основное применение фокусируется на анализе данных в области машиностроения.
* Применения в биологии: 
** [http://opus.kobv.de/btu/volltexte/2009/593/pdf/thesis.pdf Функционально-структурное моделирование растений с помощью языка графой грамматики]
** [[doi:10.1016/j.tcs.2011.07.004| Моделирование многоклеточного развития с использованием   строково-регулярной графовой грамматики]]
* Искусственный интеллект, обработка естественного языка: 
** [[OpenCog]] предоставляет базовую поддержку сопоставления с образцом (на основе [[Гиперграф|гиперграфов]]), которая используется для реализации различных алгоритмов ИИ.
** [http://wiki.opencog.org/w/RelEx RelEx] - парсер английского языка, который использует переписывание графов для преобразования ссылочного разбора в [[Грамматика зависимостей|зависимости разбора]].

== См. также ==
* [[Теория категорий|Теория категории]]
* [[Теория графов]]
* [[Shape grammar|Грамматика формы]]
* [[Формальная грамматика]]
* [[Абстрактный семантический граф]]

== Примечания ==
{{reflist|2}}

== Список литературы ==
* {{Citation|title=Handbook of Graph Grammars and Computing by Graph Transformations|year=1997|last=Rozenberg|first=Grzegorz|url=http://www.informatik.uni-trier.de/~ley/db/conf/gg/handbook1997.html|publisher=World Scientific Publishing, volumes 1–3|isbn=9810228848|ISBN=9810228848}}.
* {{Citation|title=Matrix Graph Grammars: An Algebraic Approach to Graph Dynamics|year=2009|last=Perez|first=P.P.|publisher=[[VDM Verlag]]|isbn=978-3-639-21255-6|ISBN=978-3-639-21255-6}}.
* Геккель, Р. (2006). ''Преобразование графов в двух словах''. [http://www.elsevier.com/locate/entcs Электронные Примечания в теоретической информатике] 148 (1 спецификаций. МКС.), ПП. &#x20;187-198.
* Кёниг, Барбара (2004). ''Анализ и проверка систем с динамически меняющейся структурой''. [http://www.fmi.uni-stuttgart.de/szs/publications/koenigba/habilschrift.pdf Докторская диссертация, Университет Штутгарта], ПП. &#x20;65-180.
* {{Cite journal|last=Lobo|first=Daniel|date=2011-10-01|title=Graph grammars with string-regulated rewriting|journal=Theoretical Computer Science|volume=412|issue=43|pages=6101–6111|doi=10.1016/j.tcs.2011.07.004|issn=0304-3975}}

== Лицензия

Перевод распространяется на тех же условиях, что и оригинал в соответствии с
лицензией Creative Commons Attribution-ShareAlike 3.0 Unported (CC BY-SA 3.0).

----

&copy; 2018, Симоненко Евгений [mailto:easimonenko@mail.ru easimonenko@mail.ru]
